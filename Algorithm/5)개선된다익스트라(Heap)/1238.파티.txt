import heapq
import sys
input = sys.stdin.readline
INF = int(1e9)

N, H, F = map(int,input().split())
graph = [[] for _ in range(N+1)]

for _ in range(H):
  x, y, cost = map(int,input().split())
  graph[x].append((cost,y))

storage = [0]
result = [0]*(N+1)

def findPoint(start,fin):
  heap = []
  distance = [INF]*(N+1)

  heapq.heappush(heap,(0,start))
  distance[start] = 0


  while heap:
    dist, now = heapq.heappop(heap)

    if distance[now] < dist:
      continue

    for node_cost, node_index  in graph[now]:
      cost = node_cost + distance[now]

      if cost < distance[node_index]:
        heapq.heappush(heap,(cost, node_index))
        distance[node_index] = cost

  return distance[fin]

result = 0
for start in range(1,N+1):
  a = findPoint(F,start) 
  b = findPoint(start,F)
  result = max(result,a+b)

print(result)