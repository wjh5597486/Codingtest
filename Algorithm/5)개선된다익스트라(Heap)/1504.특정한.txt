import sys, heapq, collections
input = sys.stdin.readline
INF = sys.maxsize

N, H = map(int,input().split())
graph = collections.defaultdict(list)

for _ in range(H):
  x, y, cost = map(int,input().split())
  graph[x].append((y,cost))
  graph[y].append((x,cost))

v1,v2 = map(int,input().split())

storage = [0]
result = [0]*(N+1)

def dijkstra(start):
  heap = []
  distance = [INF]*(N+1)

  heapq.heappush(heap,(0,start))
  distance[start] = 0


  while heap:
    dist, now = heapq.heappop(heap)

    if distance[now] < dist:
      continue

    for node_index, node_cost in graph[now]:
      cost = node_cost + distance[now]

      if cost < distance[node_index]:
        heapq.heappush(heap,(cost, node_index))
        distance[node_index] = cost

 
  return distance
from_1 = dijkstra(1) 
from_v1 = dijkstra(v1)
from_v2 = dijkstra(v2)

result = min(from_1[v1] + from_v1[v2] + from_v2[N] 
 , from_1[v2] + from_v2[v1] + from_v1[N])

print(result if result < INF else -1)