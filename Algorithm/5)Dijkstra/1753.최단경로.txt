import heapq
import sys
input = sys.stdin.readline

n, m = map(int,input().split())
k = int(input())

heap = []
graph = [[] for _ in range(n+1)]

for i in range(m):
  x,y,z = map(int,input().split())
  graph[x].append([y,z])
  
INF=sys.maxsize
value = [INF] * (n+1)
value[k] = 0

heapq.heappush(heap,(0,k))

while heap:
  dist , now= heapq.heappop(heap)
  for q, w in graph[now]:
      if dist + w < value[q]:
          value[q] = dist + w
          heapq.heappush(heap, (dist + w, q))

for i in range(1, n+1):
    if value[i] == INF:
        print("INF")
    else:
        print(value[i])
=======
import sys
import heapq
input = sys.stdin.readline
INF = int(1e9)

N = int(input())
M = int(input())


graph =[[] for __ in range(N+1)]
distances = [INF] * (N+1)


for __ in range(M):
  x,y,z = map(int,input().split())
  graph[x].append([z,y])

S , F = map(int,input().split())

def go(S,F):
  heap = []
  distances[S] = 0
  heapq.heappush(heap,(0,S))

  while heap:
    cost, route = heapq.heappop(heap)

    if cost > distances[route]:
      continue

    for x,y in graph[route]:
      if distances[y] > cost + x:
       distances[y] = cost + x
       heapq.heappush(heap,(cost + x , y))

go(S,F)

print(distances[F])
>>>>>>> 20231823acc275da4491f6b52623a2fa6d4358b0
